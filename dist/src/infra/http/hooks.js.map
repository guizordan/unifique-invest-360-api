{"version":3,"sources":["../../../../src/infra/http/hooks.ts"],"sourcesContent":["import { FastifyReply, FastifyRequest } from \"fastify\";\n\nfunction isHttpErrorCode(httpCode: number): boolean {\n  return httpCode >= 400 && httpCode < 600;\n}\n\ninterface ParsedPayload {\n  success?: boolean;\n  message?: string | string[];\n  error?: string;\n  data?: any;\n}\n\nexport function handleSend(\n  req: FastifyRequest,\n  reply: FastifyReply,\n  payload: string,\n  done: (err: Error | null, payload?: string) => void\n): void {\n  let parsedPayload: ParsedPayload | string;\n\n  try {\n    parsedPayload = JSON.parse(payload);\n  } catch (error) {\n    return done(null, payload);\n  }\n\n  const {\n    success = true,\n    message,\n    error,\n    data,\n  } = parsedPayload as ParsedPayload;\n  const statusCode = reply.statusCode;\n\n  const formattedResponse: { success: boolean; data: any; messages: string[] } =\n    {\n      success: Boolean(success),\n      data,\n      messages: [],\n    };\n\n  if (typeof message === \"string\" && message) {\n    const messages = message\n      .replace(\",\\n\", \"\")\n      .split(\"Validation error: \")\n      .filter((item) => item.trim() !== \"\");\n\n    formattedResponse.messages = [...formattedResponse.messages, ...messages];\n  }\n\n  if (!success || isHttpErrorCode(statusCode)) {\n    if (typeof error === \"string\" && error) {\n      formattedResponse.messages.push(error);\n    }\n\n    const errorResponse = {\n      ...formattedResponse,\n      success: false,\n    };\n\n    return done(null, JSON.stringify(errorResponse));\n  }\n\n  return done(null, JSON.stringify(formattedResponse));\n}\n\ninterface CustomError extends Error {\n  statusCode?: number;\n  errors?: { message: string }[];\n}\n\nexport function handleError(\n  ex: CustomError,\n  req: FastifyRequest,\n  reply: FastifyReply\n): void {\n  const { statusCode, message, errors = [] } = ex;\n\n  const errorResponse = {\n    message:\n      errors[0]?.message ||\n      message ||\n      \"Ocorreu um erro inesperado. Por favor, tente novamente.\",\n  };\n\n  reply.code(statusCode || 500).send(errorResponse);\n}\n"],"names":["isHttpErrorCode","httpCode","handleSend","req","reply","payload","done","parsedPayload","JSON","parse","error","success","message","data","statusCode","formattedResponse","Boolean","messages","replace","split","filter","item","trim","push","errorResponse","stringify","handleError","ex","errors","code","send"],"mappings":"AAEA,SAASA,gBAAgBC,QAAgB;IACvC,OAAOA,YAAY,OAAOA,WAAW;AACvC;AASA,OAAO,SAASC,WACdC,GAAmB,EACnBC,KAAmB,EACnBC,OAAe,EACfC,IAAmD;IAEnD,IAAIC;IAEJ,IAAI;QACFA,gBAAgBC,KAAKC,KAAK,CAACJ;IAC7B,EAAE,OAAOK,OAAO;QACd,OAAOJ,KAAK,MAAMD;IACpB;IAEA,MAAM,EACJM,UAAU,IAAI,EACdC,OAAO,EACPF,KAAK,EACLG,IAAI,EACL,GAAGN;IACJ,MAAMO,aAAaV,MAAMU,UAAU;IAEnC,MAAMC,oBACJ;QACEJ,SAASK,QAAQL;QACjBE;QACAI,UAAU,EAAE;IACd;IAEF,IAAI,OAAOL,YAAY,YAAYA,SAAS;QAC1C,MAAMK,WAAWL,QACdM,OAAO,CAAC,OAAO,IACfC,KAAK,CAAC,sBACNC,MAAM,CAAC,CAACC,OAASA,KAAKC,IAAI,OAAO;QAEpCP,kBAAkBE,QAAQ,GAAG;eAAIF,kBAAkBE,QAAQ;eAAKA;SAAS;IAC3E;IAEA,IAAI,CAACN,WAAWX,gBAAgBc,aAAa;QAC3C,IAAI,OAAOJ,UAAU,YAAYA,OAAO;YACtCK,kBAAkBE,QAAQ,CAACM,IAAI,CAACb;QAClC;QAEA,MAAMc,gBAAgB;YACpB,GAAGT,iBAAiB;YACpBJ,SAAS;QACX;QAEA,OAAOL,KAAK,MAAME,KAAKiB,SAAS,CAACD;IACnC;IAEA,OAAOlB,KAAK,MAAME,KAAKiB,SAAS,CAACV;AACnC;AAOA,OAAO,SAASW,YACdC,EAAe,EACfxB,GAAmB,EACnBC,KAAmB;IAEnB,MAAM,EAAEU,UAAU,EAAEF,OAAO,EAAEgB,SAAS,EAAE,EAAE,GAAGD;IAE7C,MAAMH,gBAAgB;QACpBZ,SACEgB,MAAM,CAAC,EAAE,EAAEhB,WACXA,WACA;IACJ;IAEAR,MAAMyB,IAAI,CAACf,cAAc,KAAKgB,IAAI,CAACN;AACrC"}