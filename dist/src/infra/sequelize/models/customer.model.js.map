{"version":3,"sources":["../../../../../src/infra/sequelize/models/customer.model.ts"],"sourcesContent":["import {\n  Model,\n  DataTypes,\n  Sequelize,\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from \"sequelize\";\nimport bcrypt from \"bcrypt\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport class Customer extends Model<\n  InferAttributes<Customer>,\n  InferCreationAttributes<Customer>\n> {\n  declare id: CreationOptional<string>;\n  declare email: string;\n  declare phone?: string;\n  declare firstName: string;\n  declare lastName: string;\n  declare password: string;\n  declare bankCustomer?: string;\n  declare role: \"admin\" | \"backoffice\" | \"customer\";\n\n  // Association\n  // static associate(models: any) {\n  //   this.hasMany(models.Order, { foreignKey: \"userId\" });\n  // }\n}\n\n// Sequelize init function\nexport function initCustomerModel(sequelize: Sequelize): typeof Customer {\n  Customer.init(\n    {\n      id: {\n        type: DataTypes.UUID,\n        defaultValue: () => uuidv4(),\n        primaryKey: true,\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: {\n          name: \"unique_email_constraint\",\n          msg: \"Este endereço de e-mail já está sendo utilizado.\",\n        },\n        validate: {\n          isEmail: {\n            msg: \"Por favor, insira um endereço de e-mail válido.\",\n          },\n        },\n      },\n      phone: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        unique: {\n          name: \"unique_email_constraint\",\n          msg: \"Este número de telefone já está sendo utilizado.\",\n        },\n        validate: {\n          len: {\n            args: [10, 11],\n            msg: \"Número de telefone inválido.\",\n          },\n          is: {\n            args: /^[0-9]+$/i,\n            msg: \"O número de telefone deve conter apenas números.\",\n          },\n        },\n      },\n      firstName: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          len: {\n            args: [3, 30],\n            msg: \"O nome deve conter entre 3 e 30 caracteres.\",\n          },\n        },\n      },\n      lastName: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          len: {\n            args: [3, 30],\n            msg: \"O sobrenome deve conter entre 3 e 30 caracteres.\",\n          },\n        },\n      },\n      password: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        set(value: string) {\n          if (value?.length < 8 || value?.length > 30) {\n            throw new Error(\"A senha deve conter entre 8 e 30 caracteres.\");\n          }\n\n          this.setDataValue(\"password\", value);\n        },\n      },\n      role: {\n        type: DataTypes.ENUM(\"admin\", \"backoffice\", \"customer\"),\n        allowNull: false,\n        defaultValue: \"customer\",\n      },\n    },\n    {\n      sequelize,\n      modelName: \"Customer\",\n      tableName: \"Customers\",\n      hooks: {\n        beforeSave: async (customer: Customer) => {\n          if (customer.changed(\"password\")) {\n            const saltRounds = 10;\n            customer.password = await bcrypt.hash(\n              customer.password,\n              saltRounds\n            );\n          }\n        },\n      },\n    }\n  );\n\n  return Customer;\n}\n"],"names":["Model","DataTypes","bcrypt","v4","uuidv4","Customer","initCustomerModel","sequelize","init","id","type","UUID","defaultValue","primaryKey","email","STRING","allowNull","unique","name","msg","validate","isEmail","phone","len","args","is","firstName","lastName","password","set","value","length","Error","setDataValue","role","ENUM","modelName","tableName","hooks","beforeSave","customer","changed","saltRounds","hash"],"mappings":"AAAA,SACEA,KAAK,EACLC,SAAS,QAKJ,YAAY;AACnB,OAAOC,YAAY,SAAS;AAC5B,SAASC,MAAMC,MAAM,QAAQ,OAAO;AAEpC,OAAO,MAAMC,iBAAiBL;AAiB9B;AAEA,0BAA0B;AAC1B,OAAO,SAASM,kBAAkBC,SAAoB;IACpDF,SAASG,IAAI,CACX;QACEC,IAAI;YACFC,MAAMT,UAAUU,IAAI;YACpBC,cAAc,IAAMR;YACpBS,YAAY;QACd;QACAC,OAAO;YACLJ,MAAMT,UAAUc,MAAM;YACtBC,WAAW;YACXC,QAAQ;gBACNC,MAAM;gBACNC,KAAK;YACP;YACAC,UAAU;gBACRC,SAAS;oBACPF,KAAK;gBACP;YACF;QACF;QACAG,OAAO;YACLZ,MAAMT,UAAUc,MAAM;YACtBC,WAAW;YACXC,QAAQ;gBACNC,MAAM;gBACNC,KAAK;YACP;YACAC,UAAU;gBACRG,KAAK;oBACHC,MAAM;wBAAC;wBAAI;qBAAG;oBACdL,KAAK;gBACP;gBACAM,IAAI;oBACFD,MAAM;oBACNL,KAAK;gBACP;YACF;QACF;QACAO,WAAW;YACThB,MAAMT,UAAUc,MAAM;YACtBC,WAAW;YACXI,UAAU;gBACRG,KAAK;oBACHC,MAAM;wBAAC;wBAAG;qBAAG;oBACbL,KAAK;gBACP;YACF;QACF;QACAQ,UAAU;YACRjB,MAAMT,UAAUc,MAAM;YACtBC,WAAW;YACXI,UAAU;gBACRG,KAAK;oBACHC,MAAM;wBAAC;wBAAG;qBAAG;oBACbL,KAAK;gBACP;YACF;QACF;QACAS,UAAU;YACRlB,MAAMT,UAAUc,MAAM;YACtBC,WAAW;YACXa,KAAIC,KAAa;gBACf,IAAIA,OAAOC,SAAS,KAAKD,OAAOC,SAAS,IAAI;oBAC3C,MAAM,IAAIC,MAAM;gBAClB;gBAEA,IAAI,CAACC,YAAY,CAAC,YAAYH;YAChC;QACF;QACAI,MAAM;YACJxB,MAAMT,UAAUkC,IAAI,CAAC,SAAS,cAAc;YAC5CnB,WAAW;YACXJ,cAAc;QAChB;IACF,GACA;QACEL;QACA6B,WAAW;QACXC,WAAW;QACXC,OAAO;YACLC,YAAY,OAAOC;gBACjB,IAAIA,SAASC,OAAO,CAAC,aAAa;oBAChC,MAAMC,aAAa;oBACnBF,SAASZ,QAAQ,GAAG,MAAM1B,OAAOyC,IAAI,CACnCH,SAASZ,QAAQ,EACjBc;gBAEJ;YACF;QACF;IACF;IAGF,OAAOrC;AACT"}