{"version":3,"sources":["../../../../src/infra/sequelize/azure.config.ts"],"sourcesContent":["import * as msal from \"@azure/msal-node\";\nimport * as tedious from \"tedious\";\n\nimport { Sequelize } from \"sequelize\";\nimport { azureDBConfig } from \"@/settings\";\n\nconst msalConfig = {\n  auth: {\n    clientId: azureDBConfig.clientId,\n    clientSecret: azureDBConfig.clientSecret,\n    authority: azureDBConfig.authority,\n  },\n};\n\nconst pca = new msal.ConfidentialClientApplication(msalConfig);\n\nconst tokenRequest = {\n  scopes: [\"https://database.windows.net/.default\"],\n};\n\nasync function getAccessToken(): Promise<string> {\n  try {\n    const response = await pca.acquireTokenByClientCredential(tokenRequest);\n    return response?.accessToken!;\n  } catch (error) {\n    console.error(\"Erro ao obter token de acesso:\", error);\n    return \"\";\n  }\n}\n\nconst accessToken = await getAccessToken();\n\nif (!accessToken) {\n  console.error(\"Não foi possível obter o token de acesso.\");\n}\nconsole.log(\"Type of tedious:\", typeof tedious);\nconst sequelize = new Sequelize(azureDBConfig.database, \"\", \"\", {\n  dialect: azureDBConfig.dialect,\n  host: azureDBConfig.host,\n  port: azureDBConfig.port,\n  dialectModule: tedious,\n  dialectOptions: {\n    server: azureDBConfig.host,\n    options: {\n      encrypt: true,\n      trustServerCertificate: false,\n    },\n    authentication: {\n      type: \"azure-active-directory-default\",\n      options: {\n        token: accessToken,\n      },\n    },\n  },\n  logging: azureDBConfig.logging,\n});\n\ntry {\n  await sequelize.authenticate();\n  console.log(sequelize.getDialect());\n\n  console.log(\n    \"Conexão com o SQL Server via Sequelize e Entra ID estabelecida com sucesso!\"\n  );\n} catch (error: any) {\n  console.error(\"Erro ao conectar com Sequelize:\", error);\n  if (error.original) {\n    console.error(\"Erro original:\", error.original);\n  }\n}\n\nexport default sequelize;\n"],"names":["msal","tedious","Sequelize","azureDBConfig","msalConfig","auth","clientId","clientSecret","authority","pca","ConfidentialClientApplication","tokenRequest","scopes","getAccessToken","response","acquireTokenByClientCredential","accessToken","error","console","log","sequelize","database","dialect","host","port","dialectModule","dialectOptions","server","options","encrypt","trustServerCertificate","authentication","type","token","logging","authenticate","getDialect","original"],"mappings":"AAAA,YAAYA,UAAU,mBAAmB;AACzC,YAAYC,aAAa,UAAU;AAEnC,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,aAAa,QAAQ,aAAa;AAE3C,MAAMC,aAAa;IACjBC,MAAM;QACJC,UAAUH,cAAcG,QAAQ;QAChCC,cAAcJ,cAAcI,YAAY;QACxCC,WAAWL,cAAcK,SAAS;IACpC;AACF;AAEA,MAAMC,MAAM,IAAIT,KAAKU,6BAA6B,CAACN;AAEnD,MAAMO,eAAe;IACnBC,QAAQ;QAAC;KAAwC;AACnD;AAEA,eAAeC;IACb,IAAI;QACF,MAAMC,WAAW,MAAML,IAAIM,8BAA8B,CAACJ;QAC1D,OAAOG,UAAUE;IACnB,EAAE,OAAOC,OAAO;QACdC,QAAQD,KAAK,CAAC,kCAAkCA;QAChD,OAAO;IACT;AACF;AAEA,MAAMD,cAAc,MAAMH;AAE1B,IAAI,CAACG,aAAa;IAChBE,QAAQD,KAAK,CAAC;AAChB;AACAC,QAAQC,GAAG,CAAC,oBAAoB,OAAOlB;AACvC,MAAMmB,YAAY,IAAIlB,UAAUC,cAAckB,QAAQ,EAAE,IAAI,IAAI;IAC9DC,SAASnB,cAAcmB,OAAO;IAC9BC,MAAMpB,cAAcoB,IAAI;IACxBC,MAAMrB,cAAcqB,IAAI;IACxBC,eAAexB;IACfyB,gBAAgB;QACdC,QAAQxB,cAAcoB,IAAI;QAC1BK,SAAS;YACPC,SAAS;YACTC,wBAAwB;QAC1B;QACAC,gBAAgB;YACdC,MAAM;YACNJ,SAAS;gBACPK,OAAOjB;YACT;QACF;IACF;IACAkB,SAAS/B,cAAc+B,OAAO;AAChC;AAEA,IAAI;IACF,MAAMd,UAAUe,YAAY;IAC5BjB,QAAQC,GAAG,CAACC,UAAUgB,UAAU;IAEhClB,QAAQC,GAAG,CACT;AAEJ,EAAE,OAAOF,OAAY;IACnBC,QAAQD,KAAK,CAAC,mCAAmCA;IACjD,IAAIA,MAAMoB,QAAQ,EAAE;QAClBnB,QAAQD,KAAK,CAAC,kBAAkBA,MAAMoB,QAAQ;IAChD;AACF;AAEA,eAAejB,UAAU"}