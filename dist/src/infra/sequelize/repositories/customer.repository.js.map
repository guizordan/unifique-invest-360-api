{"version":3,"sources":["../../../../../src/infra/sequelize/repositories/customer.repository.ts"],"sourcesContent":["import { models } from \"@/infra/sequelize\";\nimport Customer from \"@/core/customer/entities/Customer\";\nimport CustomerRepository from \"@/core/customer/interfaces/customer.repository\";\n\nconst toDomain = (model: any): Customer => {\n  return new Customer({\n    id: model.id,\n    email: model.email,\n    phone: model.phone,\n    firstName: model.firstName,\n    lastName: model.lastName,\n    cpf: model.cpf,\n  });\n};\n\nexport default class SequelizeCustomerRepository implements CustomerRepository {\n  async create(customer: Customer): Promise<Customer> {\n    const createdModel = await models.Customer.create(customer as any);\n    return toDomain(createdModel);\n  }\n\n  async findByEmail(email: string): Promise<Customer | null> {\n    const customerModel = await models.Customer.findOne({ where: { email } });\n    return customerModel ? toDomain(customerModel) : null;\n  }\n\n  async update(customer: Customer): Promise<void> {\n    if (!customer.id) {\n      throw new Error(\"Customer ID is required for update\");\n    }\n\n    const [updatedRows] = await models.Customer.update(customer, {\n      where: { id: customer.id },\n    });\n\n    if (updatedRows === 0) {\n      // Você pode optar por lançar uma exceção aqui se a atualização falhar\n      // throw new Error(`Customer with ID ${customer.id} not found`);\n      return; // Indica que nenhuma linha foi atualizada\n    }\n  }\n\n  async findById(userId: string): Promise<Customer | null> {\n    const customerModel = await models.Customer.findByPk(userId, {\n      attributes: { exclude: [\"password\"] },\n    });\n\n    return customerModel ? toDomain(customerModel) : null;\n  }\n\n  async destroy(userId: string): Promise<undefined> {\n    await models.Customer.destroy({ where: { id: userId } });\n  }\n}\n"],"names":["models","Customer","toDomain","model","id","email","phone","firstName","lastName","cpf","SequelizeCustomerRepository","create","customer","createdModel","findByEmail","customerModel","findOne","where","update","Error","updatedRows","findById","userId","findByPk","attributes","exclude","destroy"],"mappings":"AAAA,SAASA,MAAM,QAAQ,oBAAoB;AAC3C,OAAOC,cAAc,oCAAoC;AAGzD,MAAMC,WAAW,CAACC;IAChB,OAAO,IAAIF,SAAS;QAClBG,IAAID,MAAMC,EAAE;QACZC,OAAOF,MAAME,KAAK;QAClBC,OAAOH,MAAMG,KAAK;QAClBC,WAAWJ,MAAMI,SAAS;QAC1BC,UAAUL,MAAMK,QAAQ;QACxBC,KAAKN,MAAMM,GAAG;IAChB;AACF;AAEe,MAAMC;IACnB,MAAMC,OAAOC,QAAkB,EAAqB;QAClD,MAAMC,eAAe,MAAMb,OAAOC,QAAQ,CAACU,MAAM,CAACC;QAClD,OAAOV,SAASW;IAClB;IAEA,MAAMC,YAAYT,KAAa,EAA4B;QACzD,MAAMU,gBAAgB,MAAMf,OAAOC,QAAQ,CAACe,OAAO,CAAC;YAAEC,OAAO;gBAAEZ;YAAM;QAAE;QACvE,OAAOU,gBAAgBb,SAASa,iBAAiB;IACnD;IAEA,MAAMG,OAAON,QAAkB,EAAiB;QAC9C,IAAI,CAACA,SAASR,EAAE,EAAE;YAChB,MAAM,IAAIe,MAAM;QAClB;QAEA,MAAM,CAACC,YAAY,GAAG,MAAMpB,OAAOC,QAAQ,CAACiB,MAAM,CAACN,UAAU;YAC3DK,OAAO;gBAAEb,IAAIQ,SAASR,EAAE;YAAC;QAC3B;QAEA,IAAIgB,gBAAgB,GAAG;YACrB,sEAAsE;YACtE,gEAAgE;YAChE,QAAQ,0CAA0C;QACpD;IACF;IAEA,MAAMC,SAASC,MAAc,EAA4B;QACvD,MAAMP,gBAAgB,MAAMf,OAAOC,QAAQ,CAACsB,QAAQ,CAACD,QAAQ;YAC3DE,YAAY;gBAAEC,SAAS;oBAAC;iBAAW;YAAC;QACtC;QAEA,OAAOV,gBAAgBb,SAASa,iBAAiB;IACnD;IAEA,MAAMW,QAAQJ,MAAc,EAAsB;QAChD,MAAMtB,OAAOC,QAAQ,CAACyB,OAAO,CAAC;YAAET,OAAO;gBAAEb,IAAIkB;YAAO;QAAE;IACxD;AACF;AAtCA,SAAqBZ,yCAsCpB"}